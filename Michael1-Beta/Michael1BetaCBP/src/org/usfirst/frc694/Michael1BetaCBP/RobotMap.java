// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc694.Michael1BetaCBP;
    
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

import java.util.Vector;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
	/* USB PORTS */
	static final int LEFT_STICK_PORT = 0;
	static final int RIGHT_STICK_PORT = 1;
	static final int SHOOTER_STICK_PORT = 2;
	
	/* PWM OUT */
	static final int SHOOTER_CHANNEL = 3;
	static final int INTAKE_CHANNEL = 4;
	
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static Servo paddleServo;
    public static SpeedController acquirerAcquirerMotorController;
    public static SpeedController drivetrainLeftMotorController;
    public static SpeedController drivetrainRightMotorController;
    public static RobotDrive drivetrainRobotDrive;
    public static SpeedController shooterShooterMotorController;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        paddleServo = new Servo(4);
        LiveWindow.addActuator("Paddle", "Servo Paddle", paddleServo);
        
        acquirerAcquirerMotorController = new Talon(3);
        
        //LiveWindow.addActuator("Acquirer", "Acquirer Motor Controller", (VictorSP) acquirerAcquirerMotorController);
        
        drivetrainLeftMotorController = new Victor(0);
        LiveWindow.addActuator("Drivetrain", "Left Motor Controller", (Victor) drivetrainLeftMotorController);
        
        drivetrainRightMotorController = new Victor(1);
        LiveWindow.addActuator("Drivetrain", "Right Motor Controller", (Victor) drivetrainRightMotorController);
        
        drivetrainRobotDrive = new RobotDrive(drivetrainLeftMotorController, drivetrainRightMotorController);
        
        drivetrainRobotDrive.setSafetyEnabled(false);
        drivetrainRobotDrive.setExpiration(0.1);
        drivetrainRobotDrive.setSensitivity(0.5);
        drivetrainRobotDrive.setMaxOutput(1.0);
        
        drivetrainRobotDrive.setInvertedMotor(RobotDrive.MotorType.kRearLeft, true);
        drivetrainRobotDrive.setInvertedMotor(RobotDrive.MotorType.kRearRight, true);
        drivetrainRobotDrive.setInvertedMotor(RobotDrive.MotorType.kFrontLeft, true);
        drivetrainRobotDrive.setInvertedMotor(RobotDrive.MotorType.kFrontRight, true);
        
        shooterShooterMotorController = new Talon(2);
        //LiveWindow.addActuator("Shooter", "Shooter Motor Controller", (VictorSP) shooterShooterMotorController);
        
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
}
